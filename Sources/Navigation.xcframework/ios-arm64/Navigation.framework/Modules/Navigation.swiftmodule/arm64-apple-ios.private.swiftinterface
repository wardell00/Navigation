// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.1.2 effective-5.10 (swiftlang-6.1.2.1.2 clang-1700.0.13.5)
// swift-module-flags: -target arm64-apple-ios18.4 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-experimental-feature DebugDescriptionMacro -enable-bare-slash-regex -module-name Navigation
// swift-module-flags-ignorable:  -interface-compiler-version 6.1.2
import Foundation
import Swift
import SwiftUI
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@_Concurrency.MainActor @preconcurrency public struct NavigationButtonListStyle<Content> : SwiftUICore.View where Content : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public init(content: Content)
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s10Navigation0A15ButtonListStyleV4bodyQrvp", 0) __<Content>
}
extension SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public func navigationButtonListStyle() -> some SwiftUICore.View
  
}
@_hasMissingDesignatedInitializers final public class NavigationRouter<PushNav, SheetNav, FullScreenNav> where PushNav : Navigation.PushNavigation, SheetNav : Navigation.ModalNavigation, FullScreenNav : Navigation.ModalNavigation {
  final public var navigationPath: [PushNav] {
    get
    set
    _modify
  }
  final public var presentedSheet: SheetNav? {
    get
    set
    _modify
  }
  final public var presentedFullScreen: FullScreenNav? {
    get
    set
    _modify
  }
  @objc deinit
}
extension Navigation.NavigationRouter {
  final public func setActive()
  final public func resignActive()
  public static func previewRouter() -> Self
}
extension Navigation.NavigationRouter {
  final public func navigate(to destination: Navigation.Destination<PushNav, SheetNav, FullScreenNav>)
  final public func push(_ destination: PushNav)
  final public func present(_ destination: SheetNav)
  final public func present(_ destination: FullScreenNav)
  final public func deepLinkOpen(to destination: Navigation.Destination<PushNav, SheetNav, FullScreenNav>)
}
extension Navigation.NavigationRouter : Observation.Observable {
}
@_Concurrency.MainActor @preconcurrency public struct NavigationButton<Push, Sheet, FullScreen, Content> : SwiftUICore.View where Push : Navigation.PushNavigation, Sheet : Navigation.ModalNavigation, FullScreen : Navigation.ModalNavigation, Content : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public init(router: Navigation.NavigationRouter<Push, Sheet, FullScreen>, destination: Navigation.Destination<Push, Sheet, FullScreen>, label: @escaping () -> Content)
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s10Navigation0A6ButtonV4bodyQrvp", 0) __<Push, Sheet, FullScreen, Content>
}
extension Navigation.NavigationButton where Content == SwiftUICore.Text {
  @_Concurrency.MainActor @preconcurrency public init(_ title: Swift.String, router: Navigation.NavigationRouter<Push, Sheet, FullScreen>, destination: Navigation.Destination<Push, Sheet, FullScreen>)
  @_Concurrency.MainActor @preconcurrency public init(_ title: SwiftUICore.LocalizedStringKey, router: Navigation.NavigationRouter<Push, Sheet, FullScreen>, destination: Navigation.Destination<Push, Sheet, FullScreen>)
  @_Concurrency.MainActor @preconcurrency public init<S>(_ title: S, router: Navigation.NavigationRouter<Push, Sheet, FullScreen>, destination: Navigation.Destination<Push, Sheet, FullScreen>) where S : Swift.StringProtocol
}
extension Navigation.NavigationButton where Content == SwiftUICore.Image {
  @_Concurrency.MainActor @preconcurrency public init(_ image: DeveloperToolsSupport.ImageResource, router: Navigation.NavigationRouter<Push, Sheet, FullScreen>, destination: Navigation.Destination<Push, Sheet, FullScreen>)
  @_Concurrency.MainActor @preconcurrency public init(_ image: SwiftUICore.Image, router: Navigation.NavigationRouter<Push, Sheet, FullScreen>, destination: Navigation.Destination<Push, Sheet, FullScreen>)
  @_Concurrency.MainActor @preconcurrency public init(systemName: Swift.String, router: Navigation.NavigationRouter<Push, Sheet, FullScreen>, destination: Navigation.Destination<Push, Sheet, FullScreen>)
}
extension Navigation.NavigationButton where Content == SwiftUI.Label<SwiftUICore.Text, SwiftUICore.Image> {
  @_Concurrency.MainActor @preconcurrency public init(_ title: Swift.String, systemName: Swift.String, router: Navigation.NavigationRouter<Push, Sheet, FullScreen>, destination: Navigation.Destination<Push, Sheet, FullScreen>)
  @_Concurrency.MainActor @preconcurrency public init(_ title: SwiftUICore.LocalizedStringKey, systemName: Swift.String, router: Navigation.NavigationRouter<Push, Sheet, FullScreen>, destination: Navigation.Destination<Push, Sheet, FullScreen>)
  @_Concurrency.MainActor @preconcurrency public init<S>(_ title: S, systemName: Swift.String, router: Navigation.NavigationRouter<Push, Sheet, FullScreen>, destination: Navigation.Destination<Push, Sheet, FullScreen>) where S : Swift.StringProtocol
  @_Concurrency.MainActor @preconcurrency public init(title: @escaping () -> SwiftUICore.Text, icon: @escaping () -> SwiftUICore.Image, router: Navigation.NavigationRouter<Push, Sheet, FullScreen>, destination: Navigation.Destination<Push, Sheet, FullScreen>)
}
@_Concurrency.MainActor @preconcurrency public struct NavigationContainer<Push, Sheet, FullScreen, Content> : SwiftUICore.View where Push : Navigation.PushNavigation, Sheet : Navigation.ModalNavigation, FullScreen : Navigation.ModalNavigation, Content : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public init(router: Navigation.NavigationRouter<Push, Sheet, FullScreen>, @SwiftUICore.ViewBuilder content: @escaping () -> Content)
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s10Navigation0A9ContainerV4bodyQrvp", 0) __<Push, Sheet, FullScreen, Content>
}
public protocol ViewProvider : Swift.Identifiable {
  associatedtype Content : SwiftUICore.View
  func destinationView() -> Self.Content
}
public protocol PushNavigation : Navigation.ViewProvider, Swift.Hashable {
}
public protocol ModalNavigation : Navigation.ViewProvider {
}
public enum Destination<Push, Sheet, FullScreen> where Push : Navigation.PushNavigation, Sheet : Navigation.ModalNavigation, FullScreen : Navigation.ModalNavigation {
  case push(_: Push)
  case sheet(_: Sheet)
  case fullScreen(_: FullScreen)
}
extension Navigation.NavigationButtonListStyle : Swift.Sendable {}
extension Navigation.NavigationButton : Swift.Sendable {}
extension Navigation.NavigationContainer : Swift.Sendable {}
